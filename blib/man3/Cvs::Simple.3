.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Cvs::Simple 3"
.TH Cvs::Simple 3 "2013-04-24" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cvs::Simple \- Perl interface to cvs.
.SH "VERSION"
.IX Header "VERSION"
version 0.07_02
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Cvs::Simple;
\&
\&  # Basic usage:
\&  chdir(\*(Aq/path/to/sandbox\*(Aq)
\&    or die "Failed to chdir to sandbox:$!";
\&  my($cvs) = Cvs::Simple\->new();
\&  $cvs\->add(\*(Aqfile.txt\*(Aq);
\&  $cvs\->commit();
\&
\&  # Callback
\&
\&  my($commit_callback);
\&  my($commit) = 0;
\&  {
\&    my($file) = \*(Aqfile.txt\*(Aq;
\&    ($commit_callback) = sub {
\&      my($cmd,$arg) = @_;
\&      if($arg=~/Checking in $file;/) { ++$commit }
\&    };
\&  }
\&  my($cvs) = Cvs::Simple\->new();
\&  $cvs\->callback(commit => $commit_callback);
\&  $cvs\->add(\*(Aqfile.txt\*(Aq);
\&  $cvs\->commit();
\&  croak "Failed to commit file.txt" unless($commit);
\&  $cvs\->unset_callback(\*(Aqcommit\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Cvs::Simple\*(C'\fR is an attempt to provide an easy-to-use wrapper that allows cvs
commands to be executed from within a Perl program, without the programmer having to
wade through the (many) cvs global and command-specific options.
.PP
The methods provided follow closely the recipes list in \*(L"Pragmatic Version
Control with \s-1CVS\s0\*(R" by Dave Thomas and Andy Hunt (see
<http://www.pragmaticprogrammer.com/starter_kit/vcc/index.html>).
.SS "\s-1UTILITY\s0 \s-1METHODS\s0"
.IX Subsection "UTILITY METHODS"
.IP "new ( [ \s-1CONFIG_ITEMS\s0 ] )" 4
.IX Item "new ( [ CONFIG_ITEMS ] )"
Creates an instance of Cvs::Simple.
.Sp
\&\s-1CONFIG_ITEMS\s0 is a hash of configuration items.  Recognised configuration items are:
.RS 4
.IP "cvs_bin" 8
.IX Item "cvs_bin"
.PD 0
.IP "external" 8
.IX Item "external"
.IP "callback" 8
.IX Item "callback"
.RE
.RS 4
.PD
.Sp
See the method descriptions below for details of these.   If none are
specified, CVS::Simple will choose some sensible defaults.
.RE
.IP "callback ( \s-1CMD\s0, \s-1CODEREF\s0 )" 4
.IX Item "callback ( CMD, CODEREF )"
Specify a function pointed to by \s-1CODEREF\s0 to be executed for every line output
by \s-1CMD\s0.
.Sp
Permitted values of \s-1CMD\s0 are \f(CW\*(C`All\*(C'\fR (executed on every line of
output), \f(CW\*(C`add\*(C'\fR, \f(CW\*(C`commit\*(C'\fR, \f(CW\*(C`checkout\*(C'\fR, \f(CW\*(C`diff\*(C'\fR, \f(CW\*(C`update\*(C'\fR.  \s-1CMD\s0 is also
permitted to be undef, in which case, it will be assumed to be \f(CW\*(C`All\*(C'\fR.
.Sp
cvs_cmd passes two arguments to callbacks:  the actual command called, and the
line returned by \s-1CVS\s0.
.Sp
See the tests for examples of callbacks.
.IP "" 4
.PD 0
.IP "unset_callback ( \s-1CMD\s0 )" 4
.IX Item "unset_callback ( CMD )"
.PD
Remove the callback set for \s-1CMD\s0.
.IP "cvs_bin ( \s-1PATH\s0 )" 4
.IX Item "cvs_bin ( PATH )"
Specifies the location and name of the \s-1CVS\s0 binary.  Default to
\&\f(CW\*(C`/usr/bin/cvs\*(C'\fR.
.IP "cvs_cmd ( )" 4
.IX Item "cvs_cmd ( )"
\&\fIcvs_cmd()\fR does the actual work of calling the equivalent \s-1CVS\s0 command.  If any
callbacks have been set, they will be executed for every line received from
the command.  If no callbacks have been set, all output is to \s-1STDOUT\s0.
.IP "external( \s-1REPOSITORY\s0 )" 4
.IX Item "external( REPOSITORY )"
Specify an \*(L"external\*(R" repository.  This can be a genuinely remote
repository in \f(CW\*(C`:ext:user@repos.tld:/path/to/cvsroot\*(C'\fR format, or an
alternative repository on the local host.  This will be passed to the \f(CW\*(C`\-d\*(C'\fR
\&\s-1CVS\s0 global option.
.SS "\s-1CVS\s0 \s-1METHODS\s0"
.IX Subsection "CVS METHODS"
.IP "add     ( \s-1FILE1\s0, [ .... , FILEx ] )" 4
.IX Item "add     ( FILE1, [ .... , FILEx ] )"
.PD 0
.IP "add_bin ( \s-1FILE1\s0, [ .... , FILEx ] )" 4
.IX Item "add_bin ( FILE1, [ .... , FILEx ] )"
.PD
Add a file or files to the repository; equivalent to \f(CW\*(C`cvs add file1, ....\*(C'\fR,
or \f(CW\*(C`cvs add \-kb file1, ...\*(C'\fR in the case of \fIadd_bin()\fR.
.IP "co ( \s-1TAG\s0, \s-1MODULE\s0 )" 4
.IX Item "co ( TAG, MODULE )"
.Vb 1
\&  Alias for checkout()
.Ve
.IP "checkout ( \s-1MODULE\s0 )" 4
.IX Item "checkout ( MODULE )"
.PD 0
.IP "checkout ( \s-1TAG\s0, \s-1MODULE\s0 )" 4
.IX Item "checkout ( TAG, MODULE )"
.PD
.Vb 1
\&  Note that co() can be used as an alias for checkout().
.Ve
.IP "ci" 4
.IX Item "ci"
.Vb 1
\&  Alias for commit().
.Ve
.IP "commit ( )" 4
.IX Item "commit ( )"
.PD 0
.IP "commit ( \s-1FILELIST_ARRAYREF\s0 )" 4
.IX Item "commit ( FILELIST_ARRAYREF )"
.IP "commit ( \s-1TAG\s0 )" 4
.IX Item "commit ( TAG )"
.IP "commit ( \s-1TAG\s0, \s-1FILELIST_ARRAYREF\s0 )" 4
.IX Item "commit ( TAG, FILELIST_ARRAYREF )"
.PD
These are the equivalent of \f(CW\*(C`cvs commit \-m ""\*(C'\fR, \f(CW\*(C`cvs commit \-m "" file1, file2, ...., fileN\*(C'\fR, \f(CW\*(C`cvs commit \-r TAG \-m ""\*(C'\fR and \f(CW\*(C`cvs commit \-r TAG \-m "" file1, file2, ....,
fileN\*(C'\fR respectively.
.Sp
Note that \fIci()\fR can be used as an alias for \fIcommit()\fR.
.IP "diff ( \s-1FILE_OR_DIR\s0 )" 4
.IX Item "diff ( FILE_OR_DIR )"
.PD 0
.IP "diff ( \s-1TAG1\s0, \s-1TAG2\s0, \s-1FILE_OR_DIR\s0 )" 4
.IX Item "diff ( TAG1, TAG2, FILE_OR_DIR )"
.PD
\&\s-1FILE_OR_DIR\s0 is a single file, or a directory, in the sandbox.
.Sp
Performs context diff: equivalent to \f(CW\*(C`cvs diff \-c FILE_OR_DIR\*(C'\fR or \f(CW\*(C`cvs
diff \-c \-rTAG1 \-rTAG2 FILE_OR_DIR\*(C'\fR.
.IP "merge ( \s-1OLD_REV\s0, \s-1NEW_REV\s0, \s-1FILENAME\s0 )" 4
.IX Item "merge ( OLD_REV, NEW_REV, FILENAME )"
This is the equivalent of \f(CW\*(C`cvs \-q update \-jOLD_REV \-jNEW_REV FILENAME\*(C'\fR.  Note
for callback purposes that this is actually an \fIupdate()\fR.
.IP "backout ( \s-1CURRENT_REV\s0, \s-1REVERT_REV\s0, \s-1FILENAME\s0 )" 4
.IX Item "backout ( CURRENT_REV, REVERT_REV, FILENAME )"
.PD 0
.IP "undo ( \s-1CURRENT_REV\s0, \s-1REVERT_REV\s0, \s-1FILENAME\s0 )" 4
.IX Item "undo ( CURRENT_REV, REVERT_REV, FILENAME )"
.PD
Reverts from \s-1CURRENT_REV\s0 to \s-1REVERT_REV\s0.  Equivalent to \f(CW\*(C`cvs update
\&\-jCURRENT_REV \-jREVERT_REV FILENAME\*(C'\fR.
.Sp
Note that \fIbackout()\fR can be used as an alias for \fIundo()\fR.
.Sp
Note that for callback purposes this is actually an \fIupdate()\fR.
.IP "upd" 4
.IX Item "upd"
.Vb 1
\&  Alias for update().
.Ve
.IP "update ( )" 4
.IX Item "update ( )"
.PD 0
.IP "update ( \s-1FILE1\s0, [ ...., FILEx ] );" 4
.IX Item "update ( FILE1, [ ...., FILEx ] );"
.PD
Equivalent to \f(CW\*(C`cvs \-q update \-d\*(C'\fR and \f(CW\*(C`cvs \-d update file1, ..., filex\*(C'\fR.
.Sp
Note that updates to a specific revision (\f(CW\*(C`\-r\*(C'\fR) and sticky-tag resets (\f(CW\*(C`\-A\*(C'\fR) are not currently supported.
.Sp
Note that \fIupd()\fR is an alias for \fIupdate()\fR.
.IP "up2date ( )" 4
.IX Item "up2date ( )"
Short-hand for \f(CW\*(C`cvs \-nq update \-d\*(C'\fR.
.IP "status ( )" 4
.IX Item "status ( )"
.PD 0
.IP "status( file1 [, ..., ... ] )" 4
.IX Item "status( file1 [, ..., ... ] )"
.PD
Equivalent to \f(CW\*(C`cvs status \-v\*(C'\fR.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "LIMITATIONS AND CAVEATS"
.IX Header "LIMITATIONS AND CAVEATS"
.ie n .IP "1. Note that ""Cvs::Simple"" carries out no input validation; everything is passed on to \s-1CVS\s0.  Similarly, the caller will receive no response on the success (or otherwise) of the transaction, unless appropriate callbacks have been set." 4
.el .IP "1. Note that \f(CWCvs::Simple\fR carries out no input validation; everything is passed on to \s-1CVS\s0.  Similarly, the caller will receive no response on the success (or otherwise) of the transaction, unless appropriate callbacks have been set." 4
.IX Item "1. Note that Cvs::Simple carries out no input validation; everything is passed on to CVS.  Similarly, the caller will receive no response on the success (or otherwise) of the transaction, unless appropriate callbacks have been set."
.PD 0
.ie n .IP "2. The ""cvs_cmd"" method is quite simplistic; it's basically a pipe from the equivalent \s-1CVS\s0 command line (with \s-1STDERR\s0 redirected).  If a more sophisticated treatment, over-ride ""cvs_cmd"", perhaps with something based on ""IPC::Run"" (as the Cvs package does)." 4
.el .IP "2. The \f(CWcvs_cmd\fR method is quite simplistic; it's basically a pipe from the equivalent \s-1CVS\s0 command line (with \s-1STDERR\s0 redirected).  If a more sophisticated treatment, over-ride \f(CWcvs_cmd\fR, perhaps with something based on \f(CWIPC::Run\fR (as the Cvs package does)." 4
.IX Item "2. The cvs_cmd method is quite simplistic; it's basically a pipe from the equivalent CVS command line (with STDERR redirected).  If a more sophisticated treatment, over-ride cvs_cmd, perhaps with something based on IPC::Run (as the Cvs package does)."
.ie n .IP "3. This version of ""Cvs::Simple"" has been developed against cvs version 1.11.19.  Command syntax may differ in other versions of cvs, and ""Cvs::Simple"" method calls may fail in unpredictable ways if other versions are used.   Cross-version compatibiility is something I intend to address in a future version." 4
.el .IP "3. This version of \f(CWCvs::Simple\fR has been developed against cvs version 1.11.19.  Command syntax may differ in other versions of cvs, and \f(CWCvs::Simple\fR method calls may fail in unpredictable ways if other versions are used.   Cross-version compatibiility is something I intend to address in a future version." 4
.IX Item "3. This version of Cvs::Simple has been developed against cvs version 1.11.19.  Command syntax may differ in other versions of cvs, and Cvs::Simple method calls may fail in unpredictable ways if other versions are used.   Cross-version compatibiility is something I intend to address in a future version."
.ie n .IP "4. The ""diff"", ""merge"", and ""undo"" methods lack proper tests.  More tests are required generally." 4
.el .IP "4. The \f(CWdiff\fR, \f(CWmerge\fR, and \f(CWundo\fR methods lack proper tests.  More tests are required generally." 4
.IX Item "4. The diff, merge, and undo methods lack proper tests.  More tests are required generally."
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIcvs\fR\|(1), Cvs, VCS::Cvs
.SH "AUTHOR"
.IX Header "AUTHOR"
Stephen Cardie <stephenca@ls26.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Stephen Cardie.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
